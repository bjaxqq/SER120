1. Inheritence is where a new class is derived from an existing class. 
This new class is called the sub/derived class, and the existing class is called the super/base class. 
The derived class inherits all the properties of the base class and can add new properties to itself as well.
Inheritence is useful when there is a a specialized version of another class.

Example 1: Animal and Dog
In this case, the Animal would be the super class and the Dog would be the subclass.
Dog inherits the properties of Animal, like weight and age.
In addition to these, Dog adds its own properties, like breed and bark.

Example 2: Car and Nissan
In this case, Car would be the super class and Nissan would be the subclass.
Nissan inherits the properties of Car, such as four wheels and a license plate.
Nissan also adds its own properties such as branding (logos, type of material used, etc.)

2. Aggregation is where one class has a reference to another class.
The referenced class isn't part of the other class like inheritence.
The relationship can best be described as "has-a".
One class contains another class for implementation.

Example 1: School and Student
In this case, School has a reference to Student, but they are mutually independent.
Student can be in classes inside of School, and School has enrolled students.

Example 2: Lawyer and Law Firm
In this case, Law Firm has a reference to Lawyer inside of itself, but again they are independent.
Lawyer can be part of the Law Firm, and Law Firm has Lawyers inside of it.

3. Composition is where one class is part of another class' object.
The class that is a part of the other class can't be independent.
The relationship between the two can be thought of as "part-of"

Example 1: Engine and Car
Engine cannot exist outside of Car, and Car has Engine as a part of it.

Example 2: Graphics Card and Computer
Graphics Card cannot exist outside of Computer, and it is a part of Computer.